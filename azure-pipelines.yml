trigger:
- develop
- master
- release/*

variables:
   # Agent VM image name
  vmImageName: 'ubuntu-latest'

  aspnetEnvironment: 'Production'
  buildConfiguration: 'Release'

  ${{ if eq(variables['Build.SourceBranchName'], 'refs/heads/develop') }}:
    environment: 'dev'
    aspnetEnvironment: 'Development'
    buildConfiguration: 'Debug'
  ${{ if eq(variables['Build.SourceBranchName'], 'refs/heads/master') }}:
    environment: 'int'
    prevEnvironment: 'dev'
  ${{ if startsWith(variables['Build.SourceBranchName'], 'refs/heads/release/') }}:
    environment: 'pro'
    prevEnvironment: 'int'
  
  solutionName: 'ElGuerre.Items'
  projectName: 'items-api'

  #SONARQUBE
  sonarServiceConnection: 'Sonar Cloud.io'
  sonarProjectName: 'DotNet.ApiRest.BasicTemplate'
  sonarProjectKey: 'DotNet.ApiRest.BasicTemplate'
  sonarProjectVersion: '1.0'
  sonarOrganization: 'juanluelguerre-github'

  # DOCKER
  dockerRegistryServiceConnection: 'elguerreacrServiceConnection'
  dockerRegistryName: 'elguerreacr'
  dockerRepository: $(projectName)
  # yyyymmdd.n
  dockerTag: $(Build.BuildId)

  # AKS
  kubernetesServiceConnection: 'elguerreaksServiceConnection'
  aksNamespace: 'dev'

  helmChartName: $(projectName)

stages:
- stage: Build
  displayName: Build Stage 
  jobs:   
  - job: BuildJobDevelop
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    pool:
      vImage: $(vmImageName)
    steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Sonar Cloud.io Service Connection'
          organization: 'juanluelguerre-github'
          scannerMode: 'MSBuild'
          projectKey: 'DotNet.ApiRest.BasicTemplate'
          projectName: 'DotNet.ApiRest.BasicTemplate'
          extraProperties: |
            sonar.language=cs
            sonar.coverageReportPaths=$(Build.SourcesDirectory)/TestResults/Reports/SonarQube.xml
            sonar.exclusions=**/bin/**/*,**/obj/**/*,**/Migrations/**
            sonar.coverage.exclusions=$(Build.SourcesDirectory)/test/**

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build solution'
        inputs:
          projects: 'content/$(solutionName).sln'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet unit tests'
        inputs:
          command: test
          projects: 'content/test/**/*.Tests.csproj'
          arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=Cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/Tests.Cobertura.xml'
        continueOnError: true

      - task: DotNetCoreCLI@2
        displayName: 'dotnet Integration tests'
        inputs:
          command: test
          projects: 'content/test/**/*.IntegrationTests.csproj'
          arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=Cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/IntegrationTests.Cobertura.xml'
        continueOnError: true

      - task: reportgenerator@4
        displayName: ReportGenerator
        inputs:
          reports: '$(Build.SourcesDirectory)/TestResults/Coverage/Tests.Cobertura.xml;$(Build.SourcesDirectory)/TestResults/Coverage/IntegrationTests.Cobertura.xml'
          targetdir: '$(Build.SourcesDirectory)/TestResults/Reports/'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;SonarQube'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results *.trx'
        inputs:
          testResultsFormat: XUnit
          testResultsFiles: '**/*.trx'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/Reports/Cobertura.xml'
          pathToSources: '$(Build.SourcesDirectory)/content/src'
          reportDirectory: '$(Build.SourcesDirectory)/TestResults/Reports/'

      - task: SonarCloudAnalyze@1

      - publish: $(System.DefaultWorkingDirectory)
        displayName: 'Upload files'
        artifact: api

  - job: BuildJobRelease
    condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    pool:
      vImage: $(vmImageName)
    steps:
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build solution'
        inputs:
          projects: 'content/$(solutionName).sln'
          arguments: '--configuration $(buildConfiguration)'

      - publish: $(System.DefaultWorkingDirectory)
        displayName: 'Upload files'
        artifact: api  

- stage: buildAndPushDocker
  displayName: Build Docker Image
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: buildAndPushDockerJob
    pool: 
      vImage: s(vmImageName)
    steps:
      - download: current
        artifact: api

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo 'ENVIRONMENT: $(environment)'

      - task: Docker@2
        inputs:
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: $(dockerRepository)
          command: 'buildAndPush'
          Dockerfile: $(Pipeline.Workspace)/api/content/Dockerfile
          tags: |
            $(environment)
            $(dockerTag)
          arguments: 'ASPNETCORE_ENVIRONMENT=$(aspnetEnvironment)'
      
- stage: ConfigureHelm
  displayName: Configue HelmDeploy
  dependsOn: buildAndPushDocker
  condition: succeeded()
  jobs:
  - job: ConfigureHelmJob
    pool: 
      vImage: s(vmImageName)
    steps:
      - download: current
        artifact: api
      #
      # Actual AKS ya includye Helm3 (y por tanto Tiller) !
      #
      - task: HelmInstaller@1
        inputs:
          helmVersionToInstall: 3.1.1

      - task: Bash@3
        displayName: 'Install Tiller'
        inputs:
          targetType: 'inline'
          script: 'helm tiller start-ci'

      - task: Kubernetes@1
        displayName: 'Allow permissions to kubectl Dashboard'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'elguerreaksServiceConnection'
          command: apply
          arguments: -f $(Pipeline.Workspace)/api/content/k8s/rbac-config.yaml

      #
      # heml init dont need in v3.x.x
      #
      - task: HelmDeploy@0
        displayName: 'helm init'
        inputs:
          # namesace (by default) -> Kube-system (Cross for all namespaces)
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: $(kubernetesServiceConnection)
          useClusterAdmin: true
          command: init
          upgradeTiller: false
          waitForExecution: false
          # arguments: '--client-only'

# Run deploy for develop branch
- stage: DeploytoDEV
  displayName: Deploy to DEV
  dependsOn: ConfigureHelm
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeploymentDEVJob
    pool:
      vmImage: $(vmImageName)
    environment: DEV
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: api

          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(aksNamespace)
              useClusterAdmin: true
              command: upgrade
              chartType: FilePath
              chartPath: '$(Pipeline.Workspace)/api/content/k8s/helm/$(helmChartName)'
              releaseName: '$(projectName)_$(environment)'
              overrideValues: 'image.repository=$(dockerRegistryName).azurecr.io/$(dockerRepository),image.tag=$(environment)'
              valueFile: '$(Pipeline.Workspace)/api/content/k8s/helm/$(helmChartName)/values.yaml'
              # recreate: true
              force: true
              arguments: '--version $(dockerTag)'

# Run deploy for releases or master branch
- stage: DeployRelease
  displayName: Deploy to $(environment)'
  dependsOn: ConfigureHelm
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeploymentReleaseJob
    pool:
      vmImage: $(vmImageName)
    environment: RELEASE
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: api

          - task: Docker@2
            displayName: 'Docker login'
            inputs:
              containerRegistry: 'elguerreacrServiceConnection'
              command: 'login'

          - task: Bash@3
            displayName: 'New tag - $(environment)'
            inputs:
              targetType: 'inline'
              script: |
                docker pull '$(dockerRegistryName).azurecr.io/$(dockerRepository):prevEnvironment'
                docker tag '$(dockerRegistryName).azurecr.io/$(dockerRepository):prevEnvironment' '$(dockerRegistryName).azurecr.io/$(dockerRepository):$(environment)'
                docker push '$(dockerRegistryName).azurecr.io/$(dockerRepository):$(environment)'

          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(environment)
              useClusterAdmin: true
              command: upgrade
              chartType: FilePath
              chartPath: '$(Pipeline.Workspace)/api/content/k8s/helm/$(helmChartName)'
              releaseName: '$(projectName)_$(environment)'
              overrideValues: 'image.repository=$(dockerRegistryName).azurecr.io/$(dockerRepository),image.tag=$(environment)'
              valueFile: '$(Pipeline.Workspace)/api/content/k8s/helm/$(helmChartName)/values.yaml'
              # recreate: true
              force: true
              arguments: '--version $(dockerTag)'

